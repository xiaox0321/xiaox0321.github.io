<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[感谢龙哥]]></title>
    <url>%2F2019%2F01%2F07%2F2019%2F01%2F%E6%84%9F%E8%B0%A2%E9%BE%99%E5%93%A5%2F</url>
    <content type="text"><![CDATA[Why上周五，网易云上推荐的歌曲听到了李玉刚的&lt;刚好遇见你&gt;，刚好前段时间龙哥在老家举行婚礼，在婚礼上就是对着新娘在唱这首歌，我以前也没有听过，但是看龙哥唱的很用心，所以对首歌也有些印象，当再次听到这首歌，感觉自己应该写点什么了。 简单介绍06年，我去了山西大学商务学院(三本，说是山西学院，毕业拿的也是山西学院的学位证)，分到的宿舍是六人的，虽然都是来自山西，但是山西从南到北还是很长的，龙哥，斌哥和我是运城的，其他的我就记不住了（原谅我那不好的记忆），宿舍关系相处的还算可以，涛哥有点不合群，和宿舍的几个打过架，相对来说，他和其他的宿舍的人好点，他经常不在宿舍，而是去其他的宿舍什么的。亮哥也是和其他的宿舍关系感觉比较好，应该也是和一些人关系好，宿舍斌哥和鹏哥关系比较好，也经常一起吧。我呢，就和龙哥稍微好点了，不过，龙哥经常不去上课，点名的时候有时候帮他答道，有时候是宿舍其他人，我不太会作假。可能也是都是运城的吧，所以和龙哥关系好点。网吧通宵，打一些网络游戏，基本上都是龙哥带着的，我玩游戏也比较菜，龙哥还是比较有天赋的，玩什么都比较厉害。上的这个学校，是在郊区，外面没啥好玩的，有时候去外面都是做黑车，貌似龙哥带过我几次去徐西。龙哥还是很多才多艺的，打乒乓球很厉害，虽然有点胖，跳街舞也很好，还会唱歌，学校了的晚会貌似都参加过几次。记得有一次和龙哥一起回运城的时候，应该是没买上票，坐的大巴车，在路上有一段地方有雪，在一个桥上，前面应该有事故什么的，司机紧急刹车，路非常滑，先是左转，后是右转，感觉车都转了180度了，当时在车上确实没啥感觉，但是貌似还抓着龙哥胳膊，一直被龙哥笑话这个。大学生活也比较普普通通，应该和大多数人一样，花着家里的钱，在学校里玩，混毕业证，学位证，然后等着毕业吧，当时龙哥还带着我考计算机的一些证书，后来感觉也没啥用吧。还有就是毕业那会很多人都打算考研，考公务员什么的，我也没有那么高的打算，唉，毕业后在家里玩一款《龙之谷的》游戏。 来北京大四的那段时间，有培训机构在学校里，说是会包分配工作，有一部人提前去了北京，做嵌入式开发的培训，后来毕业后，龙哥找我说是打算去北京培训，我在家里也没有事，就是玩游戏，培训是要花好几万，还是跟着龙哥去北京了。因为也不知道以后要做啥，先去北京培训看看也好。来北京，和龙哥提着很多行李，被子什么的还是大学时期的，去投奔了一个来北京比较早的几个人。去问了下培训的事，也不理想，龙哥带着我去了几个培训的，后来一个培训机构骗我们说android是嵌入式，培训这个，但是也不懂，就开始培训那个了。住的条件差了很多，比大学那会差了很多，吃饭什么的都是到附近的一个山西面馆吃。培训那会每天挤着公交，每次在门边上，被挤的动不了，实在是挤怕了，后来发现又另一个地方有始发站公交也能到，但是走路过去快半个小时，后来我们就坐那个车了。培训的时候，每天的午饭需要自己解决，和龙哥每天中午吃饭都是到楼下街边上买快餐，然后站在路边吃，其实龙哥饭量比较大，应该都没有吃饱过。培训的时候就几个月，然后前期大部分时间教java基础，然后教了点android的基础知识就打发了，当时感觉培训白花钱了，但也算是有点入门了。有一次去培训机构，从公交上下车，我因为低血糖，龙哥在后面还拉了我一把，要不然，估计就毁容了吧。培训结束后，面试了第一家公司就录取上了，在一个小区的里面的住宅区，一点不正规，龙哥当时来面试的时候，没录取上，其实龙哥能力挺强的。在第一个公司也没待太久，被一个测试的欺负就走了。后来吧，每天也都是在工作，回家玩手机。后来，我有一个决定，搬出去那个六个人的住的。原因吧，说起来挺丢人的，我从来没有对任何人说过。我们住的地方，脏又差，而且当时那会，我们都是十天半个月才洗一次澡吧，身上肯定都是味道很大的。有一次，龙哥坐着玩dota，我躲在被子里看小说，我看到龙哥一直在吹，应该是觉得哪里味道太大了，我觉得我都躲到被子里了，是不是龙哥在针对我（现在想想真的好天真，龙哥向来不是那种人，再说那个时间段，大家都是那样脏臭吧），然后我脑子一热，第二天下班就在沙河看了一个房子，然后没几天我就搬家了，估计龙哥当时也很伤心吧。反正后来就和龙哥联系都少了，也就偶尔在微信朋友圈发表评论什么的。后来我结婚，鹏哥也是差不多时间结婚，当时协调了一下日期什么的，可惜的是，最后我结婚的时候，鹏哥时间冲突了，也没来，斌哥当时也有些事情没来，亮哥（唉，他去世了，据说是喝酒出事了），失去了一个哥们。涛哥后来很久都没有联系过，他也没有和我们宿舍的几个联系过。龙哥参加我的婚礼，我也没有好好招待下，我也不懂，反正一些礼节的都不懂。在北京其实和龙哥也没怎么聚会，但是知道龙哥一直很优秀的，在哪里都能混的好。有一次在中关村吃肉夹馍还遇到龙哥和龙哥媳妇，还送了我回家去。龙哥现在还在百度，认识的人肯定不少，不像我，这么多年，也没有认识几个人。龙哥打游戏一直很厉害，以前带我打，我比较菜，后来玩王者荣耀，也是非常厉害，就带过我媳妇打了一次，后来也没有带过了，可能是觉得我媳妇打的太菜了吧，主要是我媳妇就玩的比较菜。 龙哥结婚龙哥终于结婚了，在十一国庆的那几天，我也和宿舍的几个约好了去找龙哥。（我有了小孩，不太方便带着一起去，路上的小孩比较闹，我家小孩从出生到那天，没有一天是离开过她的，很是舍不得，龙哥婚礼也很重要的）。那天下了火车，龙哥叫他的一个本地的哥们去接我，下了火车，我打电话，发现打不通，哈哈，我的手机是google的，移动的支持不好，还有就是火车站太偏僻了，奇怪的是网络却没有问题，用微信联系上龙哥，后来找到了他的那个哥们，带着我去龙哥家。我是没有想到，龙哥家是住在山腰那边，在路上，我看到永济比运城感觉差了不少，村子的发展没有运城那边快。听龙哥以前说过，家里在发电厂工作，我也没啥概念，一直以为龙哥家是非常有钱的吧，到了那边，看，和我应该家里条件差不多，不过住山边上，应该也是风比较大吧。到了屋子里，找到了鹏哥和斌哥，感觉都胖了一些，我其实也胖了，他们玩游戏。后来聊了聊，晚上就吃饭去了，龙哥比较忙，一直没有影子，后来吃饭的时候出现了一下。其实自从我喝酒把牙摔掉后，很久没有喝过酒了，但是吃饭还是喝了一些。晚上的时候，去了龙哥安排的酒店了，听说是接新娘要从这个酒店。（因为他媳妇是石家庄的，比较远，所以安排在酒店，第二天接），晚上的时候，和鹏哥，斌哥出去吃了点东西，再睡的，本来，我是一个人睡隔壁的那个房间的，鹏哥是怕我害怕吧（一直很胆小，怕黑），和我一间房，晚上聊了一些他这些年的事，吃了不少苦什么的，后来比较晚了，就睡了。早上起来，在酒店吃了点早餐，然后等龙哥来酒店接媳妇，龙哥也是感觉啥都不懂，被人指挥着做这个做那个，接媳妇习俗就很多，我也没看懂，就折腾折腾，到了中午，坐车去酒店，正式举办婚礼了。提前被安排放那个手里拿着能大花的玩意。有一点不好的地方是，龙哥的媳妇一直在那边站在，龙哥到处很别人说话（应该属于应酬吧），但是我感觉还是有点忽略了他媳妇。后来到12点，想不到龙哥有准备，后面的那个屏幕放着龙哥准备的结婚照，一直在轮播，还有龙哥上台对新娘唱歌，就是开头说的那个李玉刚的，后来就是吃饭了，期间喝了点酒，鹏哥问我封礼了没，我还没，就拿着银行卡找银行，回来的时候，看礼台那些人正在点钱，感觉封上了，差点没给龙哥封上。吃完饭，鹏哥和斌哥就走了，他们要赶车，时间有点来不及了，后来我就跟着龙哥的一个哥们的媳妇坐车去龙哥家那边了。晚上的时候，龙哥带着他媳妇的亲戚，在外面吃，我也跟着，貌似除了我之外，其他人要么是龙哥的家人，要么是龙哥媳妇家人，哈哈，我还是一样的脸皮厚。吃完后，龙哥爸爸开车给我送回酒店了，说是明天送我去火车站。那，所以说我胆小，晚上的时候，我一个人确实挺怕的，我就开着灯睡了一晚上，一个人的时候，还是怕怕的。第二天，早上起来吃了饭，龙哥说先送他媳妇亲戚，叫我在酒店等着（在等的过程，我把手机卡拿出来，放到乔姐给我的那个iphone6里面，发现能打电话，看来还是我手机的问题），等了会，看时间差不多了，我给龙哥说我自己打车去吧，就不麻烦了，龙哥说马上就到，我就去楼下等了会，然后坐着龙哥爸爸开的车去火车站，龙哥胖，所以坐前排了，他媳妇和他妈妈做后面，我也做后面，路上，他媳妇就睡着了，看这些天是累的不行了，到了火车站就告别了龙哥，先回北京了。 感谢写这些，其实是很感谢龙哥的，在大学的时候也就保持了良好的关系，也受到了不少照顾，毕业之后也是龙哥带着来到北京发展，不过，我确实不行，龙哥在北京混的风生水起，我也只是羡慕羡慕。感谢的话，也不定要告诉他，但是自己心里一定要有的，也是心里有感触，才想把这些写下来。]]></content>
      <categories>
        <category>生活琐事</category>
        <category>2019</category>
        <category>1</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[go语言的微服务学习]]></title>
    <url>%2F2019%2F01%2F04%2F2019%2F01%2Fgo%E7%BB%83%E4%B9%A0grpc%E7%9A%84%E5%BE%AE%E6%9C%8D%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[参考学习的地方，代码和内容基本上都是从这个地方搬过来的。李浩的博客一、go 语言编写 grpc 微服务实例二、go-kit 与 grpc 结合开发微服务三、go-kit 与 grpc 结合实现注册发现与负载均衡四、 go-kit 微服务的限流实现五、go-kit 微服务熔断机制六、go-kit 微服务请求跟踪介绍 开始后台的东西，我是不会的，从工作开始就是一直从事的android，手机端app的开发，但是一直是比较受制于人，产品，美工，测试，后台，很多方面的人都要配合，但是，实际上遇到的都是能力低下，但是又喜欢指手画脚的一些人，很无奈，对前端的开发也充满了失望。还有个原因是android的开发效率也是太低了，每次改动一些东西，代码编辑很慢，对电脑要求很高，速度还是不快，编译完成后安装到手机上后，还需要手动点很多个界面才能看到自己改动的功能，一天的时间，等待编译运行的时间就能耗费半天吧。虽然我现在买了surface book2，配置也还过的去，但是已经对android无爱了。工作中自己学习过一些php，学习过一些nodejs，学习过python，后来又接触了go，但是工作中没有用过，也都仅限于学习，所以对后台的东西其实一点不懂，但是还是要学习的，这次就是照着别人的博客内容，练习了一下go的微服务，虽然里面还是有很多不懂的，但是记录到这里，以后也可以翻看。 环境搭建因为我用的是windowns10系统，其实由于开发android，必须先把自己的电脑的java环境安装，就是下载jdk，安装好就行了，有时候需要配置下环境变量go环境我是windows和linux都有，原因是我还是比较喜欢linux的命令的，go很多第三方库的下载都还是需要翻墙才能下载，比较习惯在linux配置代理下载go的编写用的goland，破解的，还是很好用的，能用的起正版的还是用正版比较合适。代理用的这个shadowsocks，自己买的vps服务器，搭建起来的，因为linux终端下要用到http代理，就用来cow这个来把socket转为http的代理 环境的搭建都是可以网上搜到来完成搭建的，就不写的那么详细了。 grpc的准备忘了当初是怎么在windowns10下的wsl里怎么安装protoc了，网上搜了一个脚本，应该没啥问题，先贴上12345678910111213141516#! /bin/bash# Make sure you grab the latest versioncurl -OL https://github.com/google/protobuf/releases/download/v3.6.1/protoc-3.6.1-linux-x86_64.ziphttps://github.com/google/protobuf/releases/download/v3.6.1/protoc-3.6.1-linux-x86_64.zip# Unzipunzip protoc-3.6.1-linux-x86_64.zip -d protoc3# Move protoc to /usr/local/bin/sudo mv protoc3/bin/* /usr/local/bin/# Move protoc3/include to /usr/local/include/sudo mv protoc3/include/* /usr/local/include/# Optional: change ownersudo chown $USER /usr/local/bin/protocsudo chown -R $USER /usr/local/include/google 然后安装golang protobuf直接使用golang的get即可12go get -u github.com/golang/protobuf/proto // golang protobuf 库go get -u github.com/golang/protobuf/protoc-gen-go //protoc --go_out 工具 下面的是简单的项目结构图 首先是编写book.proto文件12345678910111213141516171819202122232425262728syntax = &quot;proto3&quot;; // 请求书详情的参数结构 book_id 32位整形 message BookInfoParams &#123; int32 book_id = 1; &#125; // 书详情信息的结构 book_name字符串类型 message BookInfo &#123; int32 book_id = 1; string book_name = 2; &#125; // 请求书列表的参数结构 page、limit 32位整形message BookListParams &#123; int32 page = 1; int32 limit = 2; &#125; // 书列表的结构 BookInfo结构数组message BookList &#123; repeated BookInfo book_list = 1; &#125; // 定义 获取书详情 和 书列表服务 入参出参分别为上面所定义的结构 service BookService &#123; rpc GetBookInfo (BookInfoParams) returns (BookInfo) &#123;&#125; rpc GetBookList (BookListParams) returns (BookList) &#123;&#125; &#125; 然后进入到项目目录下，执行命令生成go的代码，需要用插件才能生产server和client的代码1protoc –go_out=plugins=grpc:. book.proto 博客的作者是用的go-kit,我也去看了下，start数量非常的多，应该这个工具的东西不错，还需要按照教程来写代码，就也是用的这个了，也只能怪自己的水平太菜，只能先抄袭别人的代码来完成自己的学习。 涉及到第三方的库，就需要用工具来管理，我用的是官方的dep 我显示用dep init初始化了项目，然后把博客的代码弄过来，然后用dep ensure -update命令更新依赖，主要是我还是不太会用这个管理工具，代理挂上了，因为有些第三方的依赖不翻墙是下载不下来的。 go-kit 与 grpc 结合开发微服务先从作者哪里抄袭一下go-kit的介绍 go-kit 是一个微服务的开发工具集，微服务系统中的大多数常见问题，因此，使用者可以将精力集中在业务逻辑上。grpc 缺乏服务治理的功能，我们可以通过 go-kit 结合 grpc 来实现我们的完整需求。go-kit 抽象的 endpoint 设计让我们可以很容易包装其它微服务框架使用的协议。go-kit 提供以下功能：1、Circuit breaker（熔断器）2、Rate limiter（限流器）3、Logging（日志）4、Metrics（Prometheus 统计）5、Request tracing（请求跟踪）6、Service discovery and load balancing（服务发现和负载均衡） go-kit [TransportServer]一个 Transport 的 Server 必须要拥有 endPoint、decodeRequestFunc、encodeResponseFunc1、 endPoint 一个端点代表一个 RPC，也就是我们服务接口中的一个函数2、 decodeRequestFunc 请求参数解码函数3、 encodeResponseFunc 返回参数编码函数请求流程： 请求 -&gt;decodeRequestFunc -&gt; endPoint -&gt; encodeResponseFunc -&gt; 返回输出 go-kit 与 grpc 结合实现注册发现与负载均衡接下来就是要弄服务发现和注册了，也是先抄袭下作者的介绍 grpc 提供了简单的负载均衡，需要自己实现服务发现 resolve。我们既然要使用 go-kit 来治理微服务，那么我们就使用 go-kit 的注册发现、负载均衡机制。go-kit 官方【stringsvc3】例子中使用的负载均衡方案是通过服务端转发进行，翻找下源码 go-kit 的服务注册发现、负载均衡在【sd】包中。下面我们介绍怎么通过 go-kit 进行客户端负载均衡。go-kit 提供的注册中心1、 etcd2、 consul3、 eureka4、 zookeepergo-kit 提供的负载均衡1、 random[随机]2、 roundRobin[轮询]只需实现 Balancer 接口，我们可以很容易的增加其它负载均衡机制 type Balancer interface { Endpoint() (endpoint.Endpoint, error)}etcd 注册发现etcd 和 zookeeper 类似是一个高可用、强一致性的存储仓库，拥有服务发现功能。 我们就通过 go-kit 提供的 etcd 包来实现服务注册发现 服务端代码服务注册1、连接注册中心2、注册当前服务 客户端代码客户端流程1、 连接注册中心2、 获取提供的服务3、 监听服务目录变化，目录变化更新本地缓存4、 创建负载均衡器5、 获取请求的 endPoint 因为选用了etcd，我就去下载了windows的etcd，然后找到exe的启动程序启动起来，然后按照代码来演示效果 go-kit 微服务的限流实现我也不懂怎么限流什么的，确实很需要，然后看了下作者写的介绍的一种令牌桶的方式，感觉自己又学到了新的知识了，搬过来 go-kit提供了限流模块，该模块采用令牌桶算法实现，其实是封装了一下 golang 自带的 golang.org/x/time/rate 包来实现的。 令牌桶令牌桶这种控制机制基于令牌桶中是否存在令牌来指示什么时候可以发送流量。令牌桶中的每一个令牌都代表一个字节。如果令牌桶中存在令牌，则允许发送流量；而如果令牌桶中不存在令牌，则不允许发送流量。因此，如果突发门限被合理地配置并且令牌桶中有足够的令牌，那么流量就可以以峰值速率发送。 令牌桶算法的基本过程如下：假如用户配置的平均发送速率为 r，则每隔 1/r 秒一个令牌被加入到桶中；假设桶最多可以存发 b 个令牌。如果令牌到达时令牌桶已经满了，那么这个令牌会被丢弃；当一个 n 个字节的 [数据包] 到达时，就从令牌桶中删除 n 个令牌，并且数据包被发送到网络；如果令牌桶中少于 n 个令牌，那么不会删除令牌，并且认为这个数据包在流量限制之外； 两种限流1、DelayingLimiter【限流延迟访问】2、ErroringLimiter【限流错误返回】 Middleware因为 endpoint 的封装，我们在使用 go-kit 提供的其它中间件时十分简单。下面就是一个完整的限流延迟中间件把已有的 endPoint 外再包一层 endPoint, 再从最外层向内一层层调用 func NewDelayingLimiter(limit Waiter) endpoint.Middleware { return func(next endpoint.Endpoint) endpoint.Endpoint { return func(ctx context.Context, request interface{}) (interface{}, error) { if err := limit.Wait(ctx); err != nil { return nil, err } return next(ctx, request) } }} 使用延迟限流把之前我们的 bookListEndPoint 进行更改添加限流处理前的 bookInfoEndPoint go-kit 微服务熔断机制熔断的部分也不懂，网上还搜索了下，知道什么意思了，但是怎么实现不知道，还是只能照办作者写的 go-kit 提供了三种熔断1、 gobreaker2、 handy3、 hystrix-go hystrix 在 java 中用的比较多，我们来介绍下 go-kit 中 hystrix 的使用方法go-kit 的 hystrixMiddleware 的实现1、 Hystrix 返回 Middleware 此中间件会在原来的 endPoint 包一层 Hystrix 的 endPoint2、 hystrix 通过传入的 commanName 获取对应的 Hystrix 的设置，并设置 run 失败时运行的 fallback 函数为 nil3、 我们也可以自己实现 middleware 包装 endPoint func Hystrix(commandName string) endpoint.Middleware { return func(next endpoint.Endpoint) endpoint.Endpoint { return func(ctx context.Context, request interface{}) (response interface{}, err error) { var resp interface{} if err := hystrix.Do(commandName, func() (err error) { resp, err = next(ctx, request) return err }, nil); err != nil { return nil, err } return resp, nil } }} 客户端 hystrix 配置1、Timeout 【请求超时的时间】2、ErrorPercentThreshold【允许出现的错误比例】3、SleepWindow【熔断开启多久尝试发起一次请求】4、MaxConcurrentRequests【允许的最大并发请求数】5、RequestVolumeThreshold 【波动期内的最小请求数，默认波动期 10S】 commandName := “my-endpoint”hystrix.ConfigureCommand(commandName, hystrix.CommandConfig{ Timeout: 1000 * 30, ErrorPercentThreshold: 1, SleepWindow: 10000, MaxConcurrentRequests: 1000, RequestVolumeThreshold: 5,})增加熔断中间件的包装 breakerMw := circuitbreaker.Hystrix(commandName)//增加熔断中间件reqEndPoint = breakerMw(reqEndPoint) go-kit 微服务请求跟踪介绍这个已经是作者的最后一篇了，大部分是代码，需要安装下zipkin，我也是下载了zipkin.jar包，然后启动 照搬一些作者内容 go-kit 提供了两种 tracing 请求跟踪1、opentracing【跟踪标准】2、zipkin【zipkin 的 go 封装】 我们下面来介绍下 zipkin 在 go-kit 中的使用方法。 这个是zipkin的监控图 代码部分因为我很多也不懂，最后的完成的代码也是也贴出来的，这样自己以后看起来的时候，也还能知道怎么做，作者的代码里有不少注释，我也都也是弄过来了，这样就大概知道什么意思了 server.go123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161package mainimport ( "context" "github.com/go-kit/kit/endpoint" "github.com/go-kit/kit/log" "github.com/go-kit/kit/ratelimit" "github.com/go-kit/kit/sd/etcdv3" "github.com/go-kit/kit/tracing/zipkin" grpcTransport "github.com/go-kit/kit/transport/grpc" opzipkin "github.com/openzipkin/zipkin-go" "github.com/openzipkin/zipkin-go/reporter/http" "golang.org/x/time/rate" "google.golang.org/grpc" "math/rand" "net" "time" "xiaox0321.com/2019/01/gokitdemo/pb")type BookServer struct &#123; bookListHandler grpcTransport.Handler bookInfoHandler grpcTransport.Handler&#125;func (s *BookServer) GetBookInfo(ctx context.Context, in *book.BookInfoParams) (*book.BookInfo, error) &#123; _, rsp, err := s.bookInfoHandler.ServeGRPC(ctx, in) if err != nil &#123; return nil, err &#125; return rsp.(*book.BookInfo), err&#125;func (s *BookServer) GetBookList(ctx context.Context, in *book.BookListParams) (*book.BookList, error) &#123; _, rsp, err := s.bookListHandler.ServeGRPC(ctx, in) if err != nil &#123; return nil, err &#125; return rsp.(*book.BookList), err&#125;//创建bookList的EndPointfunc makeGetBookListEndpoint() endpoint.Endpoint &#123; return func(ctx context.Context, request interface&#123;&#125;) (interface&#123;&#125;, error) &#123; rand.Seed(time.Now().Unix()) randInt := rand.Int63n(200) time.Sleep(time.Duration(randInt) * time.Millisecond) //请求列表时返回 书籍列表 bl := new(book.BookList) bl.BookList = append(bl.BookList, &amp;book.BookInfo&#123;BookId: 1, BookName: "21天精通php"&#125;) bl.BookList = append(bl.BookList, &amp;book.BookInfo&#123;BookId: 2, BookName: "21天精通java"&#125;) return bl, nil &#125;&#125;//创建bookInfo的EndPointfunc makeGetBookInfoEndpoint() endpoint.Endpoint &#123; return func(ctx context.Context, request interface&#123;&#125;) (interface&#123;&#125;, error) &#123; rand.Seed(time.Now().Unix()) randInt := rand.Int63n(200) time.Sleep(time.Duration(randInt) * time.Millisecond) //请求详情时返回 书籍信息 req := request.(*book.BookInfoParams) b := new(book.BookInfo) b.BookId = req.BookId b.BookName = "21天精通php" return b, nil &#125;&#125;func decodeRequest(_ context.Context, req interface&#123;&#125;) (interface&#123;&#125;, error) &#123; return req, nil&#125;func encodeResponse(_ context.Context, req interface&#123;&#125;) (interface&#123;&#125;, error) &#123; return req, nil&#125;func main() &#123; var ( //etcd服务地址 etcdServer = "127.0.0.1:2379" //服务的信息目录 prefix = "/services/book/" //当前启动的实例的地址 instance = "127.0.0.1:50051" //服务实例注册的路径 key = prefix + instance //服务是列注册的val value = instance ctx = context.Background() //服务监听地址 serviceAddress = ":50051" ) //etcd的连接参数 options := etcdv3.ClientOptions&#123; DialTimeout: time.Second * 3, DialKeepAlive: time.Second * 3, &#125; //创建etcd连接 client, err := etcdv3.NewClient(ctx, []string&#123;etcdServer&#125;, options) if err != nil &#123; panic(err) &#125; //创建注册器 registrar := etcdv3.NewRegistrar(client, etcdv3.Service&#123; Key: key, Value: value, &#125;, log.NewNopLogger()) //注册器启动注册 registrar.Register() reporter := http.NewReporter("http://localhost:9411/api/v2/spans") defer reporter.Close() zkTracer, err := opzipkin.NewTracer(reporter) zkServerTrace := zipkin.GRPCServerTrace(zkTracer) bookServer := new(BookServer) bookListEndPoint := makeGetBookListEndpoint() //创建限流器 1r/s limiter := rate.NewLimiter(rate.Every(time.Second*1), 100000) //通过DelayingLimiter中间件，在bookListEndPoint的外层再包裹一层限流的endPoint bookListEndPoint = ratelimit.NewDelayingLimiter(limiter)(bookListEndPoint) bookListHandler := grpcTransport.NewServer( bookListEndPoint, decodeRequest, encodeResponse, zkServerTrace, ) bookServer.bookListHandler = bookListHandler bookInfoEndPoint := makeGetBookInfoEndpoint() //通过DelayingLimiter中间件，在bookListEndPoint的外层再包裹一层限流的endPoint bookInfoEndPoint = ratelimit.NewDelayingLimiter(limiter)(bookInfoEndPoint) bookInfoHandler := grpcTransport.NewServer( bookInfoEndPoint, decodeRequest, encodeResponse, zkServerTrace, ) bookServer.bookInfoHandler = bookInfoHandler ls, _ := net.Listen("tcp", serviceAddress) gs := grpc.NewServer(grpc.UnaryInterceptor(grpcTransport.Interceptor)) book.RegisterBookServiceServer(gs, bookServer) gs.Serve(ls)&#125; client.go123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156package mainimport ( "context" "fmt" "github.com/afex/hystrix-go/hystrix" "github.com/go-kit/kit/circuitbreaker" "github.com/go-kit/kit/endpoint" "github.com/go-kit/kit/log" "github.com/go-kit/kit/sd" "github.com/go-kit/kit/sd/etcdv3" "github.com/go-kit/kit/sd/lb" "github.com/go-kit/kit/tracing/zipkin" "github.com/openzipkin/zipkin-go/reporter/http" "google.golang.org/grpc" "io" "time" "xiaox0321.com/2019/01/gokitdemo/pb" opzipkin "github.com/openzipkin/zipkin-go" grpcTransport "github.com/go-kit/kit/transport/grpc")func main() &#123; commandName := "my-endpoint" hystrix.ConfigureCommand(commandName, hystrix.CommandConfig&#123; Timeout: 1000 * 30, ErrorPercentThreshold: 1, SleepWindow: 10000, MaxConcurrentRequests: 1000, RequestVolumeThreshold: 5, &#125;) breakerMw := circuitbreaker.Hystrix(commandName) var ( //注册中心地址 etcdServer = "127.0.0.1:2379" //监听的服务前缀 prefix = "/services/book/" ctx = context.Background() ) options := etcdv3.ClientOptions&#123; DialTimeout: time.Second * 3, DialKeepAlive: time.Second * 3, &#125; //连接注册中心 client, err := etcdv3.NewClient(ctx, []string&#123;etcdServer&#125;, options) if err != nil &#123; panic(err) &#125; logger := log.NewNopLogger() //创建实例管理器, 此管理器会Watch监听etc中prefix的目录变化更新缓存的服务实例数据 instancer, err := etcdv3.NewInstancer(client, prefix, logger) if err != nil &#123; panic(err) &#125; //创建端点管理器， 此管理器根据Factory和监听的到实例创建endPoint并订阅instancer的变化动态更新Factory创建的endPoint endpointer := sd.NewEndpointer(instancer, reqFactory, logger) //创建负载均衡器 balancer := lb.NewRoundRobin(endpointer) /** 我们可以通过负载均衡器直接获取请求的endPoint，发起请求 */ //reqEndPoint, _ := balancer.Endpoint() /** 也可以通过retry定义尝试次数进行请求 */ reqEndPoint := lb.Retry(3, 100*time.Second, balancer) //增加熔断中间件 reqEndPoint = breakerMw(reqEndPoint) //现在我们可以通过 endPoint 发起请求了 req := struct&#123;&#125;&#123;&#125; for i := 1; i &lt;= 20; i++ &#123; if _, err = reqEndPoint(ctx, req); err != nil &#123; fmt.Println("当前时间: ", time.Now().Format("2006-01-02 15:04:05.99")) fmt.Println(err) time.Sleep(1 * time.Second) &#125; &#125;&#125;//通过传入的 实例地址 创建对应的请求endPointfunc reqFactory(instanceAddr string) (endpoint.Endpoint, io.Closer, error) &#123; return func(ctx context.Context, request interface&#123;&#125;) (interface&#123;&#125;, error) &#123; fmt.Println("请求服务: ", instanceAddr, "当前时间: ", time.Now().Format("2006-01-02 15:04:05.99")) conn, err := grpc.Dial(instanceAddr, grpc.WithInsecure()) if err != nil &#123; fmt.Println(err) panic("connect error") &#125; defer conn.Close() reporter := http.NewReporter("http://localhost:9411/api/v2/spans") defer reporter.Close() zkTracer, err := opzipkin.NewTracer(reporter) zkClientTrace := zipkin.GRPCClientTrace(zkTracer) bookInfoRequest := grpcTransport.NewClient( conn, "BookService", "GetBookInfo", func(_ context.Context, in interface&#123;&#125;) (interface&#123;&#125;, error) &#123; return nil, nil &#125;, func(_ context.Context, out interface&#123;&#125;) (interface&#123;&#125;, error) &#123; return out, nil &#125;, book.BookInfo&#123;&#125;, zkClientTrace, ).Endpoint() bookListRequest := grpcTransport.NewClient( conn, "BookService", "GetBookList", func(_ context.Context, in interface&#123;&#125;) (interface&#123;&#125;, error) &#123; return nil, nil &#125;, func(_ context.Context, out interface&#123;&#125;) (interface&#123;&#125;, error) &#123; return out, nil &#125;, book.BookList&#123;&#125;, zkClientTrace, ).Endpoint() parentSpan := zkTracer.StartSpan("bookCaller") defer parentSpan.Flush() ctx = opzipkin.NewContext(ctx, parentSpan) infoRet, _ := bookInfoRequest(ctx, request) bi := infoRet.(*book.BookInfo) fmt.Println("获取书籍详情") fmt.Println("bookId: 1", " =&gt; ", "bookName:", bi.BookName) listRet,_ := bookListRequest(ctx, request) bl := listRet.(*book.BookList) fmt.Println("获取书籍列表") for _,b := range bl.BookList &#123; fmt.Println("bookId:", b.BookId, " =&gt; ", "bookName:", b.BookName) &#125; return nil, nil &#125;, nil, nil&#125; 完结十分感谢那个作者提供的东西，能叫我学习到不少新的东西，如果能以后用到项目里，就更加完美了。]]></content>
      <categories>
        <category>技术学习</category>
        <category>2019</category>
        <category>1</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>go</tag>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2019写点什么]]></title>
    <url>%2F2019%2F01%2F02%2F2019%2F01%2F2019%E5%86%99%E7%82%B9%E4%BB%80%E4%B9%88%2F</url>
    <content type="text"><![CDATA[感叹今天是2019年的第一个工作日，2018对我来说，过的其实很不如意，感觉骑着电动车，穿梭在公路上比在挤地铁舒服多了，时常怀念在西二旗吃花溪牛肉米粉的日子。有几次晚上下班骑着电动车去，但是晚上就没有牛肉米粉了，有些失望。有时候会路过上地三街的路口，去吃麦当劳，一个是好久没吃了，还有就是想起了小灰灰请我吃呢，可惜的是小灰灰早早就回家生孩子去了，再也没有见过了。从大学就深受龙哥的影响，到现在都是听歌和龙哥以前的那种风格的，在翻看2018年的朋友圈，就发现了一个靠一把扇子和小拇指火的一塌糊涂的”李贞贤”，今天还循环播放了好久，听着音乐感觉浑身跳跃，跟着节奏抖的。龙哥除了唱歌，还会跳街舞，我也特别的羡慕，有时候也会在网易新闻上看别人跳机械舞什么的。微软很给力，收购了github，也开源了很多东西，当年我还想着要买一台超薄的macbook12寸的那个，但是感觉配置太低了，也太贵了，windows10的wsl出来后，能安装子系统linux，然后就感觉太厉害了，就再也没有想用苹果电脑的打算了，不管是打游戏，开发，还是使用各种linux命令，都能很好的支持，好用的桌面系统，好用的linux命令，还能触摸着玩，已经很不错了。怀念姗姗，和我很好的一个女孩，以前还能在公司天天一起吃饭，一起回家，但是后来怀孕就不上班了，然后今年的时候，说是为了孩子的打算，去了南方发展。我很伤心的，以后也见不到了，她离开后，我也好多天都开心不起来 看过一篇心里学的文章，说是越合群越无能，非常的赞同，很多伟大的人都是会坚定自己的立场的。心里还是有点小激动的，虽然只能做到不合群，但自己还是很无能。 但是我知道了 “完美是优秀的敌人”.有很多文章写得内容有很多感觉很好的句子，&lt;不努力的人不可怕，努力地悄悄的把事情办砸的人最可怕&gt;生活一天一天的过着，今年的嘻哈风格比较火，说唱今年火的不行，跟着一期一期的看完了，虽然不会唱，但是还是喜欢听的，后来才了解到姆爷，原来我听的一些英文歌就有他唱的，只是以前不知道而已。今年的时候奶奶查了出来食道癌，家里的人也都瞒着奶奶，说是小病，但是还是经常去医院里化疗，也还是瞒着奶奶说不是大问题，骗着奶奶说是医生给的治疗方案。很着急，但是也没有办法，奶奶的年纪大了，又得了癌症。很多年轻的人得癌症都很难挺过去。心里悲伤，奶奶一直很坚强的，其实每次去医院，她肯定也知道是什么情况了，她很乐观的想自己好起来，因为怕见不到奶奶，在清明的时候，请了一些假回去看奶奶，带着女儿去，叫奶奶开心一些。回去和奶奶一起拍了一些照片，留作纪念，不太好的地方是女儿不叫其他人抱，只叫爸爸妈妈抱，和奶奶待了一些天，也只能回北京上班。奶奶的身体越来越差，最后还是去世了，伤心的带着女儿又回去了，没见到奶奶最后一面。奶奶最后安葬在老家的山脚下，山清水秀，和爷爷一起合葬在了一起了，虽然见不到了，但时常也会想起来奶奶。 姗姗离职以后，和”京东小哥”就经常一起去吃饭了，我一直以为”京东小哥”不会离开的，一直会坚持到最后的，可能有其他打算吧，他媳妇怀孕，应该也是需要大量的钱吧，他也说在公司感觉不到进步了，也有一定的原因。 其实说道钱，2018年，我的花费其实也不少，房租，请的保姆，小孩的奶粉，尿不湿什么的，每个月花钱如流水。 “京东小哥”去京东之前，买了一台苹果的高配电脑，是旧款的接口比较多的，感觉还是很可以的，没问他价格，京东商城上搜了应该是要两万左右的，我呢，后来也关注了surface book2，一直想买回来用用。原因呢，显卡是做在键盘里面的，触摸板是除了mac之外比较好用的，还有就是屏幕键盘能分离，支持触摸，配合微软的宣传片，十分惊艳。后来没多久，就买了，官方的价格太贵，就到淘宝上买了，找了个信誉好的，买了回来。买回来开机后感觉非常的惊艳，用了之后在也没有用以前那个电脑的心思了（以前的那个电脑也陪伴了我四年，买的是机械革命，当年刚出来的牌子，感觉做工山寨，就是配置稍微高点）。 “京东小哥”去了京东后，我在公司也没什么好友了，就天天和乔姐一起吃饭了，有的时候就周四两个人去吃大餐。刚开始的时候我还想着可以轮着掏钱吃饭，但是性格的问题，不太喜欢主动，点餐付款什么的都不会主动，前几次还付过，后来就是每次都吃乔姐的，关系呢，当然是很亲密的姐姐了，白吃白喝她的，也不知道她有没有告诉她男人，不过就算她男人知道也不会介意的吧，我可是在乔姐的男人之前就和乔姐关系很好了，她的男人也没办法吧。其实这样不好，我也知道，亲兄弟都要明算账的，然后我经常跟着乔姐白吃她的。所以有时候我也没想着离开公司，离开了怕以后就见不到她了。 后来不断的在网易新闻上看到任天堂的游戏很火，那个时候想在咸鱼上买个二手的psp玩玩，但是一直很纠结，游戏其实都是比较怀旧的那些，感觉玩一段时间就没了，后来脑子一热，就买了任天堂的switch，也是咸鱼买的破解版的（还是穷，一个游戏好几百，不敢买），玩了一段时间&lt;赛达尔传说荒野之息&gt;，感觉很惊艳，任天堂也是凭借这个游戏在2017年大卖这个掌机，也把&lt;马里奥奥德赛&gt;打了结局，确实感觉比较好玩，现在玩&lt;精灵宝可梦let’s go&gt;感觉就没前面的惊艳了。 冬天的寒冬还是异常的冷，家里的暖气烧着，干燥的不行，因为有小孩，不敢随便买那种超声波的加湿器，就买了个蒸发型的，挺贵的，也是缓解了一些。冬天的空气也是经常会不好，看别人家里都有上万块的空气净化器，我也只能淘宝上搜一些diy的空气净化器，然后放家里用，感觉也是给自己一些心理安慰吧。 无论如何，我们都已经在这条船上了过去的都已经成为历史了，未来还是需要自己来创造。其实一直想买个ipad，因为ipad支持了手写笔，感觉用来学习挺不错的，学习的时候，喜欢画图什么的，但是感觉自己买的话，很有可能就吃灰了，一直犹豫到现在都没买。对于一些新奇的东西，我总是控制不住，以前就买了个yoga book，纸笔同步，就是电脑的配置太低了，看在线视频都卡，只能用画图板写写画画什么的还行，后悔的是买了没多久，人家就降价1000多，心痛的那个不行不行的。surface book2也是，想换个高配的电脑，因为我对java已经无爱了，想以后都是在golang的道路上。为啥会选择这个语言，第一，是google出的，第二，语言确实比较简洁，第三，天然支持并发，第四，编译速度很快。云计算的发展，golang顺势在国内崛起，各个大厂都是在用golang，docker的出现，也是推动着golang的前行，所以，后来我刷leetcode的时候都是用golang实现的，可惜的是，能力不足，一些简单的还是可以完成的，但是复制的就没有头绪了，也明白其实还是自己的数学基础差，很多东西就搞不明白了，英语也差，遇到一些问题的时候都不敢用google搜索，还是先用的百度，找不到解决办法才会用google，一直知道google能搜出来答案，就是怕看到英文的。 2019年了，人是不能活在过去的，要看像未来，当知道自己欠缺什么的时候，还是要通过自己的努力去完成的，不断的努力去追着赶上前行的人，比较矛盾的其实就是学习和工作经常是不能一起的，往往是学的东西工作不一定有用，但是工作上不会的一定是要学习的。说实话，在公司，我还是比较自由的，那，CEO和我2011年认识的，也没有过分的逼着我做一些不喜欢的事。我也没太具体的规划自己，但是学习的事情是不能落下的，知识的储备必须是自己要掌握的，不管是在哪里，知识都是会带给自己财富什么的。为什么现在开始了写文章，也是想着能自己经常的进行一些总结，一方面能对自己学习的东西进行一些总结，一方面也能调整一些自己的想法，对自己工作也有一些好处。 就这样吧，新东西肯定是都要学习的，要不断的跳出自己的舒适圈。 如果能看到这里的话，就能听到靠一把扇子和小手指火遍大江南北的歌，也算是一种奖励吧。]]></content>
      <categories>
        <category>生活琐事</category>
        <category>2019</category>
        <category>1</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown的图片使用]]></title>
    <url>%2F2019%2F01%2F02%2F2019%2F01%2Fmarkdown%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%2F</url>
    <content type="text"><![CDATA[缘由开始写文章的时候，就想，其实很多时候还是要在文章里面插入图片的,以前用过一个markdown的编辑器，可以直接上传图片生成一个在线的图片，图片存放的地方也不知道是在哪里，但是确实能正常工作，也没有去管这些。但是，重新写的时候，不太想用markdown编辑器了，原因是虽然在markdown上也可以预览，但是很多时候不是自己想要的结果，不同的markdown上预览的不太一样，还有就是关键的是用hexo的样式，在markdown编译器上显示的不太符合，所以还是打算不用编辑器了，直接在hexo提供的本地调试上预览结果，因为用的markdown语法不是很多，只要关注写文章，还是很容易的。 一些调研放弃用第三方的编译工具后，图片的存储就需要自己搞了，公司的阿里云其实是可以用的，阿里云的oss应该是可以用吧，但是不太合适，是个收费的服务，自己的图片，应该自己存储使用，百度云盘应该是可以的吧，没有调研。后来在网上搜了下，有人用的七牛的存储，有免费的空间和一些流量，心里就已经打算用七牛了。先去注册了账号，然后点到存储的地方要创建存储空间，但是要实名认证后才能用，七牛调用的是支付宝的认证的，点了认证就只能等待了，然后就去忙其他的了，不一会，收到了短信，说是实名认证可以了，赶紧就登录上去看，创建了一个存储空间，然后就截图了，然后上传到存储空间。呵呵，可以用了，下面的图片就是用的七牛的存储的展示的图片，感觉还是有点不好用，每次都要上传到七牛上，其实作为开发，是可以根据接口来上传图片，获取链接什么的，但是感觉用第三方的还是有点不爽。 其实还可以本地放图片，然后markdown文章里面引用图片的相对路径，其实这感觉也是可以的，但是有个缺点是，本来用markdown是为了减少一些必要的依赖，我也是只想关注markdown文件，不太想有其他的文件混杂在一块。 那，接下来就是在markdown里面存base64格式的图片了，这样就能和markdown绑定到一块了。首先，我就赶紧在网上找那种在线的，上传图片就能转成base64的字符，复制回来就可以了，但是有个问题是，本来是关注写作的，确比较依赖网络，要是没有网络，连图片都没办法插入了（网络图片也是这样），我找的文章，对方是用python实现的转图片，其实我用的电脑安装了wsl，也是可以用python的，代码也能直接拿来用，但是我更愿意用golang。还有，base64的字符很长，别人的建议似乎放到最后，定义一个标签，然后在展示图片的地方引用，我也这样做下，不影响写作部分。 感觉效果还是比较好的，接下来就是要搜索下golang怎么实现base64的转换，和一些代码实现了 水平还是很菜的，只能先这些实现代码了，效果还是可以的 123456789101112131415161718192021222324252627282930313233343536373839404142import ( "encoding/base64" "flag" "fmt" "os" "path")func main() &#123; //读原图片 var filePath string flag.StringVar(&amp;filePath, "img", "", "set `image` path") flag.Parse() if len(filePath) &gt; 0 &#123; fileType := path.Ext(path.Base(filePath)) var startStr string switch fileType &#123; case ".jpg": startStr = "data:image/jpeg;base64," case ".png": startStr = "data:image/png;base64," default: fmt.Println("暂时不支持的格式") return &#125; file, _ := os.Open(filePath) defer file.Close() bytes := make([]byte, 500000) n, _ := file.Read(bytes) //base64压缩 sourcing := base64.StdEncoding.EncodeToString(bytes[:n]) fmt.Println(startStr + sourcing) &#125;else&#123; fmt.Println("需要传入图片") &#125;&#125; 然后在终端下 go run base64image.go -img filepath &gt; baseimage.txt 复制出来内容粘贴过来就可以了。还是有些收获的，记录一下。]]></content>
      <categories>
        <category>生活琐事</category>
        <category>2019</category>
        <category>1</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo环境写作，github展示]]></title>
    <url>%2F2018%2F12%2F29%2F2018%2F12%2F%E5%8D%9A%E5%AE%A2%E9%87%8D%E6%96%B0%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[以前刚开始写文章的时候，在网上做了一些调研，最后就是选用了hexo来搭建，github展示文章，当时还选取一款红色的主题来搭建的，里面也写了几十个文章吧，挺少的，每个文章的内容都是比较少的，关键是没有坚持下来，慢慢的也都没有记录了。确实以前的时候也不知道记录什么，感觉自己没有进步，每天工作就是在重复很多事情，尤其是android的开发，编译好使，内存也经常不够用的样子，感觉经常就是在浪费时间，整天应该也就是浑浑噩噩。 现在因为以前用hexo的方式，感觉还是挺好用的，也比较熟悉，还有就是现在用的是windows10的wsl，用的linux系统，安装很多环境都是非常方便的网上找了按照的方式粘贴一下吧，安装这些环境都是网上找的 更新ubuntu软件源1234sudo apt-get updatesudo apt-get install -y python-software-properties software-properties-commonsudo add-apt-repository ppa:chris-lea/node.jssudo apt-get update 安装nodejs123sudo apt-get install nodejssudo apt install nodejs-legacysudo apt install npm 更新npm的包镜像源，方便快速下载12sudo npm config set registry https://registry.npm.taobao.orgsudo npm config list 全局安装n管理器(用于管理nodejs版本)1sudo npm install n -g 安装最新的nodejs（stable版本）12sudo n stablesudo node -v 觉得好用就下载安装了yarn123curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -echo &quot;deb https://dl.yarnpkg.com/debian/ stable main&quot; | sudo tee /etc/apt/sources.list.d/yarn.listsudo apt-get update &amp;&amp; sudo apt-get install yarn 设置淘宝源1yarn config set registry &apos;https://registry.npm.taobao.org&apos; 添加bin的路径到path（.bashrc或者自定义位置）1export PATH=&quot;$PATH:`yarn global bin`:$HOME/.config/yarn/global/node_modules/.bin&quot; 安装hexo1yarn global add hexo-cli 也可以参考 hexo的中文官网 安装,反正就是准备环境，一切就绪 因为是要重新开始，就用hexo init重新初始化了开始新的写作了，那，以前的主题红色的，也不简洁，看网上都比较推荐NexT这个主题，看了下，确实挺简洁的，就打算用这个了。 NexT官网,感觉还是很不错的，看介绍是对中文的支持比较好，就照着官网上的走了一遍，把中文的设置好，样式设置后，感觉写作起来也非常有感觉了。评论也有了，但是需要翻墙才能显示，哈哈，程序员应该都会翻墙才对的吧，要不也不用评论了。 在写作的过程中，在听网易云音乐，突然想是不是能吧音乐嵌入到文章里面，markdown是支持一些html标签的。网上搜了下，确实是可以的，在网易云的网页的音乐界面可以点生成外链，然后复制到文章里面，很开心那，但是很快发现，我要听的那个歌，版权问题，没办法生成外链，唉，试了下虾米音乐的，生成的html格式的放进去也是不识别，有点沮丧。 后来嘛，又搜了搜，有其他的解决方案，用的是hexo-tag-aplayer,然后就到github上去看怎么用了，简单的把用法搬过来一些吧。 安装aplayer1yarn add hexo-tag-aplayer 开启MeingJS 支持MetingJS 是基于Meting API 的 APlayer 衍生播放器，引入 MetingJS 后，播放器将支持对于 QQ音乐、网易云音乐、虾米、酷狗、百度等平台的音乐播放。在 Hexo 配置文件 _config.yml 中设置1234aplayer: meting: true接着就可以通过 &#123;% meting ...%&#125; 在文章中使用 MetingJS 播放器了： 12345&lt;!-- 简单示例 (id, server, type) --&gt;&#123;% meting &quot;60198&quot; &quot;netease&quot; &quot;playlist&quot; %&#125;&lt;!-- 进阶示例 --&gt;&#123;% meting &quot;60198&quot; &quot;netease&quot; &quot;playlist&quot; &quot;autoplay&quot; &quot;mutex:false&quot; &quot;listmaxheight:340px&quot; &quot;preload:none&quot; &quot;theme:#ad7a86&quot;%&#125; 其中三个必须的参数用了下，用的网易云的，哈哈，带版权的也能播放 id: 歌曲 id / 播放列表 id / 相册 id / 搜索关键字server: 音乐平台: netease, tencent, kugou, xiami, baidutype: song, playlist, album, search, artist然后就可以在看写过的文章的时候播放音乐了，感觉真的是很好。 还有就是，我看他们也有播放视频的hexo-tag-dplayer，我没有用到，但是我还是先把它安装上了，以后想弄视频进来也是非常简单的事情了。1yarn add hexo-tag-dplayer 最后呢，就是写作完成后要推送到github上面了，然后就能访问自己的简单博客了。下载好git插件1yarn add hexo-deployer-git 在 _config.yml 中添加 deploy 属性1234deploy: type: git repo: &lt;repository url&gt; branch: [branch] 最后就是等写完文章，然后生成html和推送了12hexo generatehexo deploy 然后等会就能看到效果了。 遇到的问题在弄的过程中，使用了分类和标签的功能，但是发现界面总是找不到，那个着急呀，后来搜了很多，发现，其实是没有创建标签和分类的markdown文件，加载的时候就没办法出来了。首先是新建一个tags的界面1hexo new page &quot;tags&quot; 然后打开生成的markdown文件，修改其中的内容,主要是添加type的这个12345---title: 标签date: 2018-12-29 16:36:26type: &quot;tags&quot;--- 还有就是新建categories的界面1hexo new page categories 同样的也是修改markdown文件，也是添加type属性12345---title: 分类date: 2018-12-29 21:01:24type: &quot;categories&quot;--- 然后就可以了，预览的时候就能看到效果了，还是自己有些粗心。整个过程大概就是这些，也记录一下，挺好的，也算是第二篇文章了。]]></content>
      <categories>
        <category>环境搭建</category>
        <category>2018</category>
        <category>12</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[重新开始]]></title>
    <url>%2F2018%2F12%2F28%2F2018%2F12%2F%E9%87%8D%E6%96%B0%E5%BC%80%E5%A7%8B%2F</url>
    <content type="text"><![CDATA[和过去的自己告别，与未来的自己前行已经好久都没有写博客了,已经30多了，感觉自己能力各方面都很差，但是也总是在荒废自己。以前是用hexo和mardown语法来写过几次文章，后来也没有坚持下去，而且写的东西都是比较简单的.也不知道写啥，还是先总结一下自己吧。 过往2010年10月左右来的北京，和一个宿舍的一个朋友一起来的，来的时候啥也不懂，甚至我连电梯都不会使用，都是被人带着上下电梯的。刚来北京的时候，还是拿着父母的钱交的培训费。本来是看一些大学同学来北京学的嵌入式，后来被培训机构欺骗说，android就是嵌入式，这个比较火，学这个，就和一起来的朋友学android了。哈哈，感觉很傻很天真，应该是培训android的学费高，所以培训机构就这样欺骗人，商人都是为了利益的。刚来北京，去的是比我们早一些来北京的大学同学，然后住在很破的一个河边，住的比大学宿舍破多了，上下铺，八个人的十多平米的房间，一个人还要房租好几百，厕所是公共的，楼下有个洗澡堂。刚来北京，都是十多天洗一次澡，现在想想那个时候身上的味道一定特别大吧。每天早上很早的时候就去赶公交，要去苏州街那里培训，早上很早起来吃个早餐，然后和朋友一起去挤公交，特别挤，经常挤不上去。后来我们发现走15分钟左右，可以去另一个地方排队坐另一个公交，那个是始发站，可以等有座位的时候上车。在培训的地方，每天都是吃快餐，在楼下，蹲在路边吃，刚来北京生活也不容易，也不赚钱，还是拿家里的。在培训机构，感觉也没学到啥东西，就一点基础，唉，相当于混了点经验的样子，说是给推荐工作的。学了几个月，后来推荐面试，第一次面试，也比较紧张，去的公司是个做电话，android的，是在一个住宅小区里面，一次面试就过了，真的很高兴。在回去的路上，给爸爸打电话说有工作了，那个时候兴奋的，高兴的。后来在这个感觉就不咋样的公司几个月就离职了，在第一个公司，基本上也没给我啥任务，另外两个培训机构一起来的，就做的比较多，我感觉应该还是我不会和别人交际，也是没把握机会的样子。离职前几天，是因为一个搞测试的，非叫我做测试，我明明是面试开发进去的，叫我做测试，那我以后不就只能做测试了，感觉很气愤，晚上给那个就几个人公司的老板发了个短信，说我不干了，第二天没去，那个测试第二天还给我打电话，我说不干了，后来他挂了。2011年，第二份工作，找了有几个月吧，那个时候是进步最大的时候，天天看一个java基础讲的比较好的教程，感觉当时的java基础是那个时候有了一些提升。因为那个时候，住的地方破，房租还能承受的起来。期间认识了媳妇，一直到现在结婚生娃，哈哈，这里可以略过了。第二份工作是在上地的嘉华大厦，那会面试我能力也不行，公司刚创业成立没多久（我现在还和我当时的技术领导在一个公司，他是现在公司的CEO），进到公司，没几个人，然后我和一个很帅的女孩一起做android，后来又进来一些人（第二次创业的时候很多都在，可惜现在因为各种原因，差不多都走了），就几个年轻的，所以经常和这个女孩一起吃饭，但是一个多月，我都没有发现她是个女孩，一次去厕所，我看她从女厕所出来，我提醒她是不是走错厕所了，她说没有啊，后来回到工位，被其他人嘲笑了，挺有意思的。这个公司对我很有意义的，android的开发水平有了一定的提高，从无知到一些入门的感觉，期间做了不少东西，当时做lbs的东西，爬大众点评的一些数据做，失败了。后来做打车软件，当时的滴滴打车也刚做没多久，差不多同时做的，那个公司的司机端是定制pad上做，给司机用，质量也差，当时滴滴地推的时候，还在给司机配的pad上安装滴滴的打车软件，也是竞争了一下。后来也不行了，好像是空降的一个女的领导，把很多钱弄自己腰包里了。那个时候，公司里感觉很差，一些人离职了，我也离职了，离职的时候和现在的CEO在会议室谈话，还哭了一顿，后来听说，没有离职的都是被辞退了，补偿了一些东西，电脑或者是一些钱什么的。第三家，我也不懂，是个第三方的外包，用友，然后外派面试到百度里面。在百度工作，但不是百度员工，是外派的员工。在里面，配置的很差的台式机，开发的是电视盒子app的桌面和设置的一些东西，在里面经常受到另一个，他自认为资深的，也是外派到百度的人欺负，感觉人在屋檐下，没办法，项目做的也不好，里面也没有资深的开发。期间玩了真人CS,感觉很好玩，也没待太长时间，也有好几个月吧，反正也算是在大公司里面混过的人了。第四个公司也就是现在的公司了，当时从第二家公司离职的不少人都在这个公司，一起开始新的创业了，我也是在和现在的CEO，一起吃了个麦当劳就加入了公司了。刚开始，也不知道要做啥，开始给别人做了一些产品，也就是外包，后来做自己的产品，很快发现做不下去，又做了不少外包的，期间我认识了我的乔姐姐，在公司就一直一起打水，怎么说呢，关系是很好的。后来搬家的时候，房子贵，就拉着她一起住了，住在一个比较贵的房子里，奢侈了一把，能住一起，就知道我们关系很好了，在公司里也一直比较照顾我，我是个不太会说话的人，一起创业的人，慢慢都已经是管理角色的时候，我还是在做开发，公司慢慢的人数也变多了，也来了很多能力差的人，配合起来相当困难，我也感觉很气愤，也有几次想离职，但是被他们劝了下来（现在的情况是他们基本上都走了，我还在公司）。现在的公司我也看不懂，还是外包为主，然后现在是自主经营体模式，我呢，还是打杂的，也不知道该做啥。在公司吧，也是有不少成长的，但是我感觉成长的不是很大。最大的感受是，我不在原因做android了，太费时间，效率又十分低下。期间我就自学了一些语言，php，nodejs，golang，最后还是觉得golang比较简洁，效率高（现在的很多公司都用golang实现核心的东西了，docker更是推动了golang，云计算的大规模应用），但是公司还是始终已java为主的，原因也是很无奈，java出来的时间长，入门简单，但是很多开发的水平太菜了，后果就是公司里的很多项目，很难收尾。公司里java的开发流动比较快也是这个原因吧。还有个事就是，公司其实有一次聚会，我喝多了，然后骑自行车回去，在铁路的地方摔了，掉了三颗牙（两颗门牙都没了），过段时间我结婚了，在家里，没敢告诉家人，还是被发现了，期间都不敢笑，会没人看到没有牙的，后来就是不断的去医院，然后做了种植牙手术，去了很多次，大部分时间都是很疼的，刚做完第一次比较大的手术，脸肿了好久，感觉头大了一圈的样子，很难看，都没去过上班，都是在家，吃饭都不能好好吃，也是比较受罪吧。这么糗的事算了不能多说了，现在种植牙完事好久了。自从实施经营体后，我也就不知道该做啥了，慢慢的也就自己学一些东西了，算法书看了一些，然后发现很多时候都看不懂了，英语也是总没有学好。算法也没进展了，是数学基础不行，很多都看不懂了。 未来其实，我一直有离职的打算吧，但是CEO不叫我走，虽然他是CEO，但是我也从来没把他当作领导。2019年就要到了，我感觉自己也没办法一直荒废自己了，所以，重新开始了写一些东西，我想在写作的时候，能督促自己学一些其他的东西。2019年，数学一定要学好。已买了一些数学书，来学习算法的，花了一些钱线性代数：https://item.jd.com/11773454.html微积分：https://item.jd.com/12056402.html概率论与数理统计：https://item.jd.com/12112157.html离散数学及其应用：https://item.jd.com/1470866315.html图论导引：https://item.jd.com/11573518.html算法导论：https://item.jd.com/1047063653.html 英语其实也有一些打算，先背单词，也网上找了一些计划，下载了一些单词，但是坚持不下来，从小就对自己的记忆知道不行，但是在2019年还是要背诵一些单词的，英语不行做啥都吃亏。因为暂时没有太多的打算，基础不好，做啥都做不了的。算法学的入门一些，感觉就可以在开源的上面做一些东西了，还有就是微服务上也会有一些自己的见解了。数学不好，现在的机器学习什么的，根本就没办法入门。未来是什么样子的也不好说，可能我2019年会离职吧，去其他的公司见识见识，或者继续待这个公司，我还是舍不得乔姐姐的，离开这个公司就很难以后见到她了，所以可能还会在公司待着。 学习一定不能落下，所以开始写作了，只有不断的写作，不断的对自己进行总结，也能不断的有新的思路，才能慢慢明确自己的学习方向。]]></content>
      <categories>
        <category>生活琐事</category>
        <category>2018</category>
        <category>12</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
</search>
